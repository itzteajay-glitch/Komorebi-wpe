# Including this here for future suffereing
# https://rhysd.github.io/actionlint/
# The Release Step:
# https://github.com/marketplace/actions/open-sauced-release
# The build and attach step:
# https://github.com/jtdor/build-deb-action
name: Build and Release Pipeline

on:
  push:
    branches:
      - main
      - beta
  workflow_dispatch:

env:
  DEBEMAIL: itzteajay@gmail.com
  GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

jobs:
  release:
    name: Generating Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "☁️  checkout repository"
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: "🚀 release"
        id: semantic-release
        env:
          SKIP_NPM_PUBLISH: true
          SKIP_DOCKER_PUBLISH: true
        uses: open-sauced/release@v2

      - name: Prep env variables to pass
        id: release
        run: |
          echo release-tag=$(echo ${{ env.release-tag }}) >> $GITHUB_OUTPUT
          echo release-version=$(echo ${{ env.RELEASE_VERSION }}) >> $GITHUB_OUTPUT
          echo release-name=$(gh release view --json name $(echo ${{ steps.semantic-release.outputs.release-tag }})) >> $GITHUB_OUTPUT
          echo release-author=$(gh release view --json author $(echo ${{ steps.semantic-release.outputs.release-tag }})) >> $GITHUB_OUTPUT
          echo release-body=$(gh release view --json body $(echo ${{ steps.semantic-release.outputs.release-tag }})) >> $GITHUB_OUTPUT
    outputs:
      release-tag: ${{ steps.release.outputs.release-tag }}
      release-version: ${{ steps.release.outputs.releaseVersion }}
      release-name: ${{ steps.release-content.outputs.releaseName }}
      release-author: ${{ steps.release-content.outputs.releaseAuthor }}
      release-body: ${{ steps.release-content.outputs.releaseBody }}

  verify-release:
    env:
      release-tag: ${{ needs.release.outputs.release-tag }}
      release-version: ${{ needs.release.outputs.release-version }}
      release-name: ${{ needs.release.outputs.release-name }}
      release-author: ${{ needs.release.outputs.release-author }}
      release-body: ${{ needs.release.outputs.release-body }}
    name: Verify Release
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Prep env variables to pass
        id: release
        run: |
            echo release-tag=${{ env.release-tag }} >> $GITHUB_OUTPUT
            echo release-version=${{ env.release-version }} >> $GITHUB_OUTPUT
            echo release-name=${{ env.release-name }} >> $GITHUB_OUTPUT
            echo release-author=${{ env.release-author }} >> $GITHUB_OUTPUT
            echo release-body=${{ env.release-body }} >> $GITHUB_OUTPUT
      - name: Checking for new release Release
        if: ${{ env.release-tag == '' }}
        run: |
            echo "No new release found"
            exit 1
      - name: Storing release data
        if: ${{ env.release-tag != '' }}
        run: |
            echo "New Release Found."
            exit 0
    outputs:
      release-tag: ${{ steps.release.outputs.release-tag }}
      release-version: ${{ steps.release.outputs.releaseVersion }}
      release-name: ${{ steps.release-content.outputs.releaseName }}
      release-author: ${{ steps.release-content.outputs.releaseAuthor }}
      release-body: ${{ steps.release-content.outputs.releaseBody }}

  build:
    env:
      release-tag: ${{ needs.verify-release.outputs.release-tag }}
      release-version: ${{ needs.verify-release.outputs.release-version }}
      release-name: ${{ needs.verify-release.outputs.release-name }}
      release-author: ${{ needs.verify-release.outputs.release-author }}
      release-body: ${{ needs.verify-release.outputs.release-body }}
    name: Build Packages and Release
    needs: verify-release
    runs-on: ubuntu-latest
    steps:
      - name: Prep env variables to pass
        id: release
        run: |
            echo release-tag=${{ env.release-tag }} >> $GITHUB_OUTPUT
            echo release-version=${{ env.release-version }} >> $GITHUB_OUTPUT
            echo release-name=${{ env.release-name }} >> $GITHUB_OUTPUT
            echo release-author=${{ env.release-author }} >> $GITHUB_OUTPUT
            echo release-body=${{ env.release-body }} >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - uses: jtdor/build-deb-action@v1
        env:
          DEB_BUILD_OPTIONS: noautodbgsym
        with:
          buildpackage-opts: --build=binary --no-sign
          source-dir: ./releases/wpe2k
          artifacts-dir: ./releases/wpe2k/debian/artifacts
          before-build-hook: cd ./releases/wpe2k; debchange -v ${{ env.release-version }}; debchange -a "Latest - ${{ env.release-body }} - see github changelog https://github.com/itzteajay-glitch/wpe2k/blob/main/CHANGELOG.md"
          extra-build-deps: devscripts git
      - name: Rename and push files into release
        run: |
            echo ${{ env.release-version }}
            echo ${{ env.release-tag }}
            mkdir -p new
            for file in $(ls ./releases/wpe2k/debian/artifacts | grep wpe2k)
              do
                suffix=$(echo ./releases/wpe2k/debian/artifacts/$file | cut -d _ -f 3)
                cp ./releases/wpe2k/debian/artifacts/$file ./new/wpe2k_$(echo ${{ env.release-version }})_$suffix
              done
            cd ./new
            gh release upload $(echo ${{ env.release-tag }}) *
            echo release-tag=${{ env.release-tag }} >> $GITHUB_OUTPUT
            echo release-version=${{ env.release-version }} >> $GITHUB_OUTPUT
    outputs:
      release-tag: ${{ steps.release.outputs.release-tag }}
      release-version: ${{ steps.release.outputs.releaseVersion }}
      release-name: ${{ steps.release-content.outputs.releaseName }}
      release-author: ${{ steps.release-content.outputs.releaseAuthor }}
      release-body: ${{ steps.release-content.outputs.releaseBody }}